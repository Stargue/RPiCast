
# use pkg-config for getting CFLAGS and LDLIBS

TOOLCHAINPATH:=rpi-toolchain/bin
CROSSPREFIX:=$(TOOLCHAINPATH)/arm-linux-gnueabihf-
BUILD_PATH:=rpi-build
RPATH:=rpi-staging/usr/lib/
CC:=$(CROSSPREFIX)g++
CFLAGS:=-Wall -g -O2 -Wl,-rpath=$(RPATH)

EXT_LDLIBS:=-lcurl -lUnitTest++ -pthread -lavdevice         \
            -lavfilter -lpostproc -lavformat -lavcodec      \
            -ldl -lXv -lva -lXfixes -lXext -lX11 -ljack     \
            -lasound -lSDL -lx264 -lbz2 -lz -lrt            \
            -lswresample -lswscale -lavutil -lm

EXT_LDPATH:=-Lrpi-staging/usr/lib
LDFLAGS:=-Lrpi-build/ -lrpicast-server

############ ----- Project include paths ----- ##############
INC:=-Irpi-staging/usr/include/                        \
     -Isource/osapi/                                   \
     -Isource/framework/                               \
     -Isource/porting_layers/components/               \
     -Isource/porting_layers/av_pipe/

#list of files containing main() function, to prevent conflicts while linking
MAINFILES:=source/main/rpicast-server.cpp
           
OBJS:=$(patsubst %.cpp, %.o, $(filter-out $(MAINFILES),$(wildcard source/porting_layers/components/*.cpp)              \
                                                       $(wildcard source/framework/*.cpp)                              \
                                                       $(wildcard source/osapi/*.cpp)                                  \
                                                       $(wildcard source/porting_layers/av_pipe/*.cpp)))

############ ----- build main application ----- ##############

TARGET:=$(BUILD_PATH)/rpicast-server
TARGET_LIB:=$(BUILD_PATH)/librpicast-server.so

.PHONY: all
all: $(BUILD_PATH) libs $(TARGET) sample tests

$(BUILD_PATH):
	          @mkdir -p $@
	
.PHONY:libs
libs: $(TARGET_LIB)

$(TARGET_LIB): $(OBJS)
	           $(CC) $(CFLAGS) -fpic -shared $^ -o $@ $(EXT_LDPATH) $(EXT_LDLIBS)

$(TARGET): source/main/rpicast-server.o
	       $(CC) $(CFLAGS) $^ -o $@ $(LDFLAGS) $(EXT_LDPATH) $(EXT_LDLIBS)

%.o: %.cpp
	 $(CC) $(CFLAGS) $(INC) -c $< -o $@

############ ----- build samples ----- ##############

SAMPLES:= $(BUILD_PATH)/screencapture     \
          $(BUILD_PATH)/socket_server     \
          $(BUILD_PATH)/socket_client     \
          $(BUILD_PATH)/hello_world

SAMPLE_SRC_DIR:=samples

.PHONY: sample
sample: $(TARGET_LIB) $(SAMPLES)

$(BUILD_PATH)/%: $(SAMPLE_SRC_DIR)/%.o
	             $(CC) $(CFLAGS) $^ -o $@ $(LDFLAGS) $(EXT_LDPATH) $(EXT_LDLIBS)
			
############ ----- build tests ----- ##############

TESTS:= $(BUILD_PATH)/unittests            \
        $(BUILD_PATH)/test_osapi           \
        $(BUILD_PATH)/test_socket          \
        $(BUILD_PATH)/test_socket_capture

TEST_SRC_DIR:= source/tests

.PHONY: tests
tests: $(TARGET_LIB) $(TESTS)
	   	
$(BUILD_PATH)/%: $(TEST_SRC_DIR)/%.o
	             $(CC) $(CFLAGS) $^ -o $@ $(LDFLAGS) $(EXT_LDPATH) $(EXT_LDLIBS)

############ ----- cleaning ----- ##############

.PHONY: clean
clean:
	 @rm -f source/framework/*.o                 \
	        source/osapi/*.o                     \
	        source/main/*.o                      \
	        source/porting_layers/av_pipe/*.o    \
	        source/porting_layers/components/*.o \
	        source/tests/*.o                     \
	        samples/*.o

.PHONY:distclean
distclean:
	 @rm -f source/framework/*.o                 \
	        source/osapi/*.o                     \
	        source/main/*.o                      \
	        source/porting_layers/av_pipe/*.o    \
	        source/porting_layers/components/*.o \
	        source/tests/*.o                     \
	        samples/*.o                          \
	        $(TARGET)                            \
	        $(TARGET_LIB)                        \
	        $(BUILD_PATH)/*
